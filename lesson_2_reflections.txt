What happens when you initialize a repository? Why do you need to do it?

- git creates an initial meta data directory (.git)
- It is necessary in order to start using git on the files in that directory.

How is the staging area different from the working directory and the repository? What value do you think it offers?

- The staging area only contains the part of the working directory.
- The staging area can be prepared for just the changes needed for the next commit, while leaving other changed files unstaged.
- It enables the user to prepare smaller more logically separated commits, rather than oen huge commit containing several possibly unrelated changes.

How can you use the staging area to make sure you have one commit per logical change?

- Only add the files I want (which would we the files that make up the logical change in question) to the staging area before committing.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

- When I want to try some experimental features.
- When I am about to make big changes to the code base.
- When I would like to have different versions of the code.

How do the diagrams help you visualize the branch structure?

- They show where the branches intersect (branch points)

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

- Making the receiving branch contain changes from both the merged branches.
- To show that the branches have been combined.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

Pros
- It saves time when automatic merges are possible.
- It prefills the commit message with the information, that the commit is about a merge.

Cons
- Subtle differences might break the code after an automatic merge.
